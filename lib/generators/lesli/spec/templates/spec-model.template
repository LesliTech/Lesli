=begin
<%# TODO: Use the license file if no lesli.txt file found %>
<%= File.read(Lesli::Engine.root.join("lesli.txt")).to_s.force_encoding("ASCII-8BIT") %>=end

require "rails_helper"
require Lesli::Engine.root.join("spec/support/testers/model")

RSpec.describe <%= @model[:name]%>, type: :model do

    # Setup runs before each test
    let(:<%= @info[:engine_resource_code] %>) { FactoryBot.create(:<%= @info[:engine_resource_code] %>) }

    it "is valid with valid attributes" do
        expect(<%= @info[:engine_resource_code] %>).to be_valid
    end

    <% @model[:columns].each do |column| %>
        <% next if ["id", "created_at", "updated_at"].include?(column[:name]) %>
        <% if !column[:null] %>
            it "is valid with valid attributes" do
                <%= @info[:engine_resource_code] %>.<%= column[:name]%> = nil
                expect(<%= @info[:engine_resource_code] %>).not_to be_valid
            end
        <% end %>
    <% end %>

=begin


    it "is invalid without a name" do
        account.name = nil
        expect(account).not_to be_valid
    end

    it "is invalid without an email" do
        account.email = nil
        expect(account).not_to be_valid
    end

    it "is invalid with a duplicate email" do
        account.save
        duplicate_account = Account.new(name: "Test Account 2", email: "test@example.com", balance: 50.0)
        expect(duplicate_account).not_to be_valid
    end

    it "is invalid without a balance" do
        account.balance = nil
        expect(account).not_to be_valid
    end

    it "is invalid with a negative balance" do
        account.balance = -1
        expect(account).not_to be_valid
    end

    # Test associations
    it "has many transactions" do
        expect(account).to respond_to(:transactions)
    end

    # Test custom methods
    describe "#update_balance" do
        it "updates the balance correctly" do
            account.save
            account.update_balance(50.0)
            expect(account.reload.balance).to eq(150.0)
        end
    end
=end
end
