<script setup>
/*
<%= File.read(Pathname.new(LESLI_ROOT).join("lesli.txt")).to_s.force_encoding("ASCII-8BIT") %>*/


// · import vue tools
import { ref, reactive, onMounted, watch, computed, inject } from "vue"
import { useRouter, useRoute } from "vue-router"


// · import stores
import { use<%= @info[:resources] %> } from "Cloud<%= @info[:engine_name].capitalize %>/stores/<%= @info[:resources_camel] %>.js"


// · initialize/inject plugins
const router = useRouter()
const msg = inject("msg")
const url = inject("url")


// · implement stores
const store<%= @info[:resources] %> = use<%= @info[:resources] %>()


// · translations
const translations = {
    core: {
        shared: I18n.t("core.shared")
    }
}


// ·
const columns = [{
    field: "id",
    label: "ID",
    sort: true
}, {
    field: "created_at",
    label: "Created at"
}, {
    field: "updated_at",
    label: "Updated at"
}]


// · 
function show<%= @info[:resource] %>(<%= @info[:resource_camel] %>) {
    router.push(url.<%= @info[:engine_name] %>("<%= @info[:resources_code] %>/:id", <%= @info[:resource_camel] %>.id))
}


// · initializing
onMounted(() => {
    store<%= @info[:resources] %>.fetch<%= @info[:resources] %>()
})

</script>
<template>
    <application-component>
        <lesli-header :title="<%= @info[:resources] %>">
            <lesli-button icon="add" :to="url.<%= @info[:engine_name] %>('<%= @info[:resources_code] %>/new')">
                {{ translations.core.shared.view_text_btn_add }}
            </lesli-button>
            <lesli-button
                icon="refresh"
                :loading="store<%= @info[:resources] %>.index.loading"
                @click="store<%= @info[:resources] %>.get<%= @info[:resources] %>()">
                {{ translations.core.shared.view_text_btn_reload }}
            </lesli-button>
        </lesli-header>

        <lesli-toolbar :search-placeholder="translations.core.shared.view_text_placeholder_search" @search="store<%= @info[:resources] %>.search">
        </lesli-toolbar>

        <lesli-table
            :loading="store<%= @info[:resources] %>.index.loading"
            :columns="columns"
            :records="store<%= @info[:resources] %>.index.records"
            :pagination="store<%= @info[:resources] %>.index.pagination"
            :link="(<%= @info[:resource_camel] %>) => show<%= @info[:resource] %>(<%= @info[:resource_camel] %>)"
            @paginate="store<%= @info[:resources] %>.index.paginate"
            @sort="store<%= @info[:resources] %>.index.paginate">
        </lesli-table>
    </application-component>
</template>
