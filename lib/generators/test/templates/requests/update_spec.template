=begin

[[license]]
=end


require "lesli_request_helper"

RSpec.describe "Tests for Lesli3", type: :request, :unless => defined?(DeutscheLeibrenten) do
    describe "PUT:[[url]]/:id.json", type: :request do
        include_context "request user authentication"

        # helper methods

        def create_element
            #if it necesary, define a method to create and object and be sure the table will not be empty of data
            @current_user.[[controller_folder]].[[controller_file]].destroy_all

            #search posibles permit values to create an element, controller module should be in singular way
            params = [[controller_folder_upper]]::[[controller_file_upper]].column_names
            params_hash_value = {}

            #cast column_names (its an Array) into a hash an insert values
            params.each do |value|
                #avoid fill id and date values
                if !((value.include? "id") || (value.include? "at") )
                    params_hash_value[value] = Faker::Lorem.word
                end
            end

            #create new object
            new_object =  @current_user.[[controller_folder]].[[controller_file]].new({})

            #avoid  unknown attribute when create objects
            new_object.attributes = params_hash_value.reject{|k,v| !new_object.attributes.keys.member?(k.to_s) }
            
            #save object
            new_object.save!
            return new_object
        end

        # test cases
        #one or more test could fail when first run them, verify the routes, controller locations and names
        #

        it "is expected to update record" do
            #make sure you have created some elements before run test and reference its id 
            [[controller_folder]]_object = create_element

            #search posibles permit values to update an element
            params = [[controller_folder_upper]]::[[controller_file_upper]].column_names
            params_hash_value = {}
            params.each do |value|
                if !((value.include? "id") || (value.include? "at") )
                    params_hash_value[value] = Faker::Name.name
                end
            end

            put("[[url]]/#{@[[controller]].id}.json", params: {
                #permit hash should have format "controller"_"module"
                [[hash_permit]]: params_hash_value
            })

            # shared examples
            expect_response_with_successful

            #validate others custom values expected here
            #@[[controller]]_params.each do |key, value|
            #   expect(response_data[key.to_s]).to eq(value)
            #end
        end

        it "is expectd to respond with not found when an invalid ID is sent" do
            #make sure you have created some elements before run test and reference its id 
            [[controller_folder]]_object = create_element

            # this ID does not exist, so should return with not found
            #@invalid_id = create_element.last.id + 1

            put("[[url]]/#{@invalid_id}.json", params: {
                #permit hash should have format "controller"_"module"
                [[hash_permit]]: @[[controller]]_params
            })

            # shared examples
            expect_response_with_not_found
        end

        it "is expected to update record when value is empty" do
            #make sure you have created some elements before run test and reference its id 
            [[controller_folder]]_object = create_element

            #search posibles permit values to update an element
            params = [[controller_folder_upper]]::[[controller_file_upper]].column_names
            params_hash_empty = {}
            params.each do |value|
                params_hash_empty[value] = ""
            end

            put("[[url]]/#{@[[controller]].id}.json", params: {
                #permit hash should have format "controller"_"module"
                [[hash_permit]]: params_hash_empty
            })

            # shared examples
            expect_response_with_error

            #validate others custom values expected here
            #@[[controller]]_params.each do |key, value|
            #   expect(response_data[key.to_s]).to eq(value)
            #end
        end

        it "is expected to update record when value is nil or undefine" do
            #make sure you have created some elements before run test and reference its id 
            [[controller_folder]]_object = create_element

            #search posibles permit values to update an element
            params = [[controller_folder_upper]]::[[controller_file_upper]].column_names
            params_hash_nil = {}
            params.each do |value|
                params_hash_nil[value] =   ""
            end

            put("[[url]]/#{@[[controller]].id}.json", params: {
                #permit hash should have format "controller"_"module"
                [[hash_permit]]: params_hash_nil
            })

            # shared examples
            expect_response_with_error

            #validate others custom values expected here
            #@[[controller]]_params.each do |key, value|
            #   expect(response_data[key.to_s]).to eq(value)
            #end
        end
    end
end

