<script>
/*
Lesli

Copyright (c) 2020, Lesli Technologies, S. A.

All the information provided by this website is protected by laws of Guatemala related 
to industrial property, intellectual property, copyright and relative international laws. 
Lesli Technologies, S. A. is the exclusive owner of all intellectual or industrial property
rights of the code, texts, trade mark, design, pictures and any other information.
Without the written permission of Lesli Technologies, S. A., any replication, modification,
transmission, publication is strictly forbidden.
For more information read the license file including with this software.

LesliCloud - Your Smart Business Assistant

Powered by https://www.lesli.tech
Building a better future, one line of code at a time.

@license  Propietary - all rights reserved.
@version  0.1.0-alpha

// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
// · 
*/


// · List of Imported Components
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~


// · 
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~


export default {
    
    // @component_prop %camel_case_resource% [Object] The object representation of the %underscore_resource%.
    //      If this component is being used by the *new* app, all the object properties are empty
    // @component_prop viewType [String] Either 'new', 'edit' or 'show'. Represents the main app that
    //      imported this component
    props: {
        %camel_case_resource%: {
            required: true
        },

        viewType: {
            type: String,
            required: true
        }
    },

    components: {

    },
    
    // @return [Object] Data used by this component's methods
    // @description Returns the data needed for this component to work properly
    // @data_variable main_route [String] the main route to which this component connects to the lesli API
    // @data_variable %underscore_resource% [Object] An object representing a %humanized_resource%, with
    //      the same params as the associated rails model
    data() {
        return {
            main_route: '%app_route%',
            %underscore_resource%: null
        }
    },

    // @return [void]
    // @description Executes the necessary functions needed to initialize this component
    mounted() {
        this.set%camel_case_resource%Id()
        this.copy%camel_case_resource%Prop()
    },

    methods: {

        // @return [void]
        // @description Retrieves the id of the %humanized_resource% and stores it in the data variable %underscore_resource%_id
        // @example
        //      console.log(this.%underscore_resource%_id) // will display null
        //      this.set%camel_case_resource%Id()
        //      console.log(this.%underscore_resource%_id) // will display a number, like 5
        set%camel_case_resource%Id(){
            this.%underscore_resource%_id = this.$route.params.id
        },

        // @return [void]
        // @description Copies the content of the prop %camel_case_resource% into the data variable %underscore_resource%.
        //      This is done to allow this component to modify the %humanized_resource%'s attributes without directly
        //      modifying the received prop
        // @example
        //      console.log(this.%underscore_resource%) // will display null
        //      this.copy%camel_case_resource%Prop()
        //      console.log(this.%underscore_resource%_id) // will display an exact copy of the %camel_case_resource% prop
        copy%camel_case_resource%Prop(){
            this.%underscore_resource% = {... this.%camel_case_resource%}
        },

        // @return [void]
        // @description Catches the submit event of the HTML form, and prevents its default behavior. Depending on the
        //      value of the *viewType* variable, executes a method that sends and HTTP post or put to the lesli API
        //  @example
        //      this.submit%camel_case_resource%() // will trigger a post if viewMode is 'new' or a put if viewMode is 'edit'
        submit%camel_case_resource%(event){
            if (event) { event.preventDefault() }

            if(this.viewType == 'new'){
                this.post%camel_case_resource%()
            }else if(this.viewType == 'edit'){
                this.put%camel_case_resource%()
            }
        },

        // @return [void]
        // @description Connects to the backend using HTTP to create a new %humanized_resource% under the current user's
        //       account. If the HTTP request fails, an error message is shown
        // @example
        //      console.log(this.%underscore_resource%.id)  // will display null since this will be a new record
        //      this.post%camel_case_resource%()            // will create a new record and redirect to it's show app
        post%camel_case_resource%() {
            let form_data = {
                %underscore_resource%: this.%underscore_resource%
            }
            let url = `${this.main_route}.json`

            this.http.post(url, form_data).then(result => {
                if (result.successful) {
                    this.alert('%humanized_resource% created successfully', 'success')
                    this.$router.push(`/${result.data.id}`)
                }else{
                    this.alert(result.error.message,'danger')
                }
            }).catch(error => {
                console.log(error)
            })

        },

        // @return [void]
        // @description Connects to the backend using HTTP to update an existing %humanized_resource% under the current user's
        //      account. The id of the %humanized_resource% is provided in the *id* route param. If the HTTP request fails,
        //      an error message is shown
        // @example
        //      this.put%camel_case_resource%() // will update the record and redirect to it's show app
        put%camel_case_resource%() {
            let form_data = {
                %underscore_resource%: this.%underscore_resource%
            }
            let url = `${this.main_route}/${this.%underscore_resource%_id}.json`

            this.http.put(url, form_data).then(result => {
                if (result.successful) {
                    this.alert('%humanized_resource% updated successfully', 'success')
                    this.$router.push(`/${this.%underscore_resource%.id}`)
                }else{
                    this.alert(result.error.message, 'danger')
                }
            }).catch(error => {
                console.log(error)
            })

        },

        // @return [void]
        // @description Connects to the backend using HTTP to delete an existing %humanized_resource% under the current user's
        //      account. The id of the %humanized_resource% is provided in the *id* route param. If the HTTP request fails,
        //      an error message is shown
        // @example
        //      this.delete%camel_case_resource%() // will delete the record and redirect to the list app
        delete%camel_case_resource%() {
            let url = `${this.main_route}/${this.%underscore_resource%_id}`

            this.http.delete(url).then(result => {
                if (result.successful) {
                    this.alert('%humanized_resource% deleted successfully', 'success')
                    this.$router.push('/')
                }else{
                    this.alert(result.error.message, 'danger')
                }
            }).catch(error => {
                console.log(error)
            })
        }
    }
}
</script>
<template>
    <div class="card" v-if="%underscore_resource%">
        <!--------------------------------------- START CARD HEADER --------------------------------------->
        <div class="card-header">
            <h2 class="card-header-title">
                %humanized_resource%
            </h2>
            <div class="card-header-icon">
                <router-link v-if="viewType == 'edit'" :to="`/${%underscore_resource%.id}`">
                    <i class="fas fa-eye"></i>
                    Show %humanized_resource%
                </router-link>
                <router-link v-if="viewType == 'show'" :to="`/${%underscore_resource%.id}/edit`">
                    <i class="fas fa-eye"></i>
                    Edit %humanized_resource%
                </router-link>
                <router-link to="/">
                    &nbsp;&nbsp;&nbsp;
                    <i class="fas fa-undo"></i>
                    Return
                </router-link>
            </div>
        </div>
        <!---------------------------------------  END CARD HEADER  --------------------------------------->

        <!--------------------------------------- START CARD CONTENT--------------------------------------->
        <div class="card-content">
            <form @submit="submit%camel_case_resource%">

                <!---------------------------------- START SUBMIT BUTTON ---------------------------------->
                <b-field v-if="viewType == 'new' || viewType == 'edit'">
                    <b-button type="is-primary" native-type="submit" expended>
                        <span v-if="viewType == 'new'">
                            Create %humanized_resource%
                        </span>
                        <span v-else>
                            Update %humanized_resource%
                        </span>
                    </b-button>
                </b-field>
                <!----------------------------------  END SUBMIT BUTTON  ---------------------------------->
                
                <!---------------------------------- START DELETE BUTTON ---------------------------------->
                <b-field v-if="viewType == 'show'">
                    <b-button type="is-danger" @click="delete%camel_case_resource%">
                        Delete %humanized_resource%
                    </b-button>
                </b-field>
                <!----------------------------------  END DELETE BUTTON  ---------------------------------->
            </form>
        </div>
        <!---------------------------------------  END CARD CONTENT --------------------------------------->
    </div>
</template>
