<script>
/*
%license%
*/


// · List of Imported Components
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~


// · 
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
export default {
    props: {

    },
    
    components: {

    },

    // @return [Object] Data used by this component's methods
    // @description Returns the data needed for this component to work properly
    // @data_variable main_route [String] the main route to which this component connects to the lesli API
    // @data_variable %underscore_resources% [Array] An array of objects, each object represents a 
    //      %humanized_resource%, with the same params as the associated rails model
    data(){
        return {
            main_route: '%app_route%',
            %underscore_resources%: null,
            reloading: false
        }
    },

    // @return [void]
    // @description Executes the necessary functions needed to initialize this component
    mounted() {
       this.get%camel_case_resources%()
    },

    methods: {

        // @return [void]
        // @description Connects to the backend using HTTP and retrieves a list of %humanized_resource% associated to
        //      the current user's account. If the HTTP request fails, an error message is shown
        // @example
        //      console.log(this.%underscore_resources%) // will display null
        //      this.get%camel_case_resources%()
        //      console.log(this.%underscore_resources%) // will display an array of objects, each representing a %humanized_resource%.
        get%camel_case_resources%() {
            this.http.get(`${this.main_route}.json`).then(result => {
                this.reloading = false
                if (result.successful) {
                    this.%underscore_resources% = result.data
                }else{
                    this.alert(result.error.message,'danger')
                }
            }).catch(error => {
                console.log(error)
            })
        },
        
        // @return [void]
        // @param %underscore_resource% [Object] The object representation of the selected %humanized_resource%
        // @description Redirects the router to show the selected %humanized_resource%
        // @example
        //      this.show%camel_case_resource%(this.%underscore_resources%[1])
        //      // Asume the id of the %humanized_resource% is 4
        //      // The user will be redirected to the url %app_route%/4
        show%camel_case_resource%(%underscore_resource%) {
            this.$router.push(`/${%underscore_resource%.id}`)
        },

        reload%camel_case_resources%(){
            this.reloading = true
            this.get%camel_case_resources%()
        }
    },

    computed: {

        // @return [String] The class that is used to give a spinning animation to the icon (if needed)
        // @description When the user clicks the 'reload' button, it changes the value of the *reloading*
        //      data variable. And that is used by this method to change the class of the icon and add it
        //      the spinning animation
        reloadingClass(){
            if(this.reloading){
                return 'fa-spin'
            }

            return ''
        }
    }
}
</script>
<template>
    <section class="section" v-if="%underscore_resources%">
        <component-data-empty v-if="%underscore_resources%.length == 0" />
        <div class="card" v-if="%underscore_resources%.length > 0">
            <div class="card-header">
                <h4 class="card-header-title">
                    %humanized_resources%
                </h4>
                <div class="buttons">
                    <button class="button is-white" @click="reload%camel_case_resources%" :disabled="reloading">
                        <b-icon icon="sync" size="is-small" :custom-class="reloadingClass" />
                    </button>
                    &nbsp;&nbsp;&nbsp;
                </div>
            </div>
            <div class="card-content">
                <b-table :data="%underscore_resources%" @click="show%camel_case_resource%" :hoverable="true">
                    <template slot-scope="props">
                        <b-table-column field="id" label="ID" width="40" numeric centered>
                            {{ props.row.id }}
                        </b-table-column>

                        <!------------ ------------------------------------------ ------------>
                        <!------------ Add other table rows here as you need them ------------>
                        <!------------ ------------------------------------------ ------------>

                    </template>
                </b-table>
            </div>
        </div>
    </section>

    <section class="section" v-else>
        <component-layout-data-loading  size="is-medium" />
    </section>
</template>
