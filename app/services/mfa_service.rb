=begin
Copyright (c) 2022, all rights reserved.

All the information provided by this platform is protected by international laws related  to
industrial property, intellectual property, copyright and relative international laws.
All intellectual or industrial property rights of the code, texts, trade mark, design,
pictures and any other information belongs to the owner of this platform.

Without the written permission of the owner, any replication, modification,
transmission, publication is strictly forbidden.

For more information read the license file including with this software.

// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
// ·
=end


######## This service is used for any MFA case ########

class MfaService

    ## Initialize the resource (user)
    def initialize resource
        @resource = resource
    end

    ## Verify if the resource (user) has MFA enabled and one MFA method (email, ...) configured
    def has_mfa_enabled?
        return LC::Response.service(true) if @resource.mfa_enabled && !@resource.mfa_method.nil?
        
        LC::Response.service(false)
    end

    ## The key is the email encrypted, we replace any whitespace by the "+" sign
    ## Because the param that comes from the URL (fronted) has whitespace instead of "+"
    def self.parse_key key
        return key.gsub(/[[:space:]]/, '+')
    end

    def self.encrypt_key key
        EncryptorService.new_encrytor.encrypt_and_sign(key)
    end

    def self.decrypt_key key
        begin
            return LC::Response.service(true, EncryptorService.new_encrytor.decrypt_and_verify(key))
        rescue => exception
            puts LC::Debug.deprecation(exception)
            return LC::Response.service(false, I18n.t("core.users/sessions.messages_danger_invalid_url_key_param"))
        end
    end

    ######## Ways to send MFA code ########

    ## Send the email with the MFA Code (OTP) and log its creation
    def send_otp_via_email request
        # We use a reusable service that generates access codes
        otp = AccessCodeService.create_access_code(@resource, "otp")

        if otp.successful?
            # Get the raw token generated by Devise
            raw = otp.payload[:raw]

            # Create logs that an OTP was created successfully
            @resource.logs.create({
                title: "otp_mfa_creation_successful",
                description: "user_agent: #{request.user_agent}, user_remote: #{request.remote_ip}"
            })

            # Send E-mail with the OTP
            UserMailer.with(user: @resource, token: raw).mfa_instructions.deliver_now

            return LC::Response.service(true)
        else
            return LC::Response.service(false, otp.error)
        end
    end

    ######## Ways to verify the MFA code sent ########

    ## Verify the OTP code sent to the user previously
    def verify_otp_sent code
        # We use the service to verify if the MFA Code is the correct one
        access_code = AccessCodeService.verify_access_code(code, "otp", @resource)

        # Check if something wrong occurred during the token's verification
        if !access_code.successful?
            return LC::Response.service(false, I18n.t("core.shared.messages_danger_not_valid_authorization_token_found"))
        end

        # Assign to the access_code found if everything was successful
        access_code = access_code.payload
     
        # Delete used token
        access_code.update({ last_used_at: Time.current })
        access_code.delete

        LC::Response.service(true)
    end

    # In the case we will implement other factors to authenticate the user (Google Authenticator, push notifications, ..)
    # They should be configured in this service
end
