/*
Lesli

Copyright (c) 2020, Lesli Technologies, S. A.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

LesliCSS - SCSS Utilities for websites, apps and web applications

Powered by https://www.lesli.tech
Building a better future, one line of code at a time.

@contact  <hello@lesli.tech>
@website  <https://lesli.tech>
@license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html

// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
// · 
*/

/*
Small between 320pz to 520px
Mobile between 320px to 768px
Tablet between 769px and 1023px
Desktop between 1024px and 1215px
Widescreen between 1216px and 1407px
FullHD up to 1408px
*/


// · Defining available breakpints sizes
$breakpoints: (
    "small":      ( min-width:  320px, max-width:  520px ),
    "mobile":     ( min-width:  320px, max-width:  768px ),
    "tablet":     ( min-width:  769px, max-width: 1023px ),
    "desktop":    ( min-width: 1024px, max-width: 1215px ),
    "widescreen": ( min-width: 1216px, max-width: 1407px ),
    "fullhd":     ( min-width: 1408px, max-width: 9999px )
) !default;


// · 
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
@mixin lesli-css-breakpoint($breakpoint: false, $width: false) {

    // If the key exists in the map
    @if $breakpoint and map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        $min-width: map-get(map-get($breakpoints, $breakpoint), min-width);

        @media only screen and (min-width: $min-width) { 
            @content;
        }

    } @else if $width {

        @media only screen and (min-width: $width) { 
            @content;
        }

    } @else { 

        // If the key doesn't exist in the map
        @warn "Breakpoint `#{$breakpoint}` not found.";

    }

}


// · 
// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
@mixin lesli-css-breakpoint-only($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        $min-width: map-get(map-get($breakpoints, $breakpoint), min-width);
        $max-width: map-get(map-get($breakpoints, $breakpoint), max-width);

        @media only screen and (min-width: $min-width) and (max-width: $max-width) { 
            @content;
        }

    } @else {

        // If the key doesn't exist in the map
        @warn "Breakpoint `#{$breakpoint}` not found.";

    }

}
