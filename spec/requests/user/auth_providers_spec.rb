require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/user/auth_providers", type: :request do
    # User::AuthProvider. As you add validations to User::AuthProvider, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
        skip("Add a hash of attributes valid for your model")
    }

    let(:invalid_attributes) {
        skip("Add a hash of attributes invalid for your model")
    }

    describe "GET /index" do
        it "renders a successful response" do
            User::AuthProvider.create! valid_attributes
            get user_auth_providers_url
            expect(response).to be_successful
        end
    end

    describe "GET /show" do
        it "renders a successful response" do
            auth_provider = User::AuthProvider.create! valid_attributes
            get user_auth_provider_url(user_auth_provider)
            expect(response).to be_successful
        end
    end

    describe "GET /new" do
        it "renders a successful response" do
            get new_user_auth_provider_url
            expect(response).to be_successful
        end
    end

    describe "GET /edit" do
        it "render a successful response" do
            auth_provider = User::AuthProvider.create! valid_attributes
            get edit_user_auth_provider_url(user_auth_provider)
            expect(response).to be_successful
        end
    end

    describe "POST /create" do
        context "with valid parameters" do
            it "creates a new User::AuthProvider" do
                expect {
                    post user_auth_providers_url, params: { user_auth_provider: valid_attributes }
                }.to change(User::AuthProvider, :count).by(1)
            end

            it "redirects to the created user_auth_provider" do
                post user_auth_providers_url, params: { user_auth_provider: valid_attributes }
                expect(response).to redirect_to(user_auth_provider_url(@user_auth_provider))
            end
        end

        context "with invalid parameters" do
            it "does not create a new User::AuthProvider" do
                expect {
                    post user_auth_providers_url, params: { user_auth_provider: invalid_attributes }
                }.to change(User::AuthProvider, :count).by(0)
            end

            it "renders a successful response (i.e. to display the 'new' template)" do
                post user_auth_providers_url, params: { user_auth_provider: invalid_attributes }
                expect(response).to be_successful
            end
        end
    end

    describe "PATCH /update" do
        context "with valid parameters" do
            let(:new_attributes) {
                skip("Add a hash of attributes valid for your model")
            }

            it "updates the requested user_auth_provider" do
                auth_provider = User::AuthProvider.create! valid_attributes
                patch user_auth_provider_url(user_auth_provider), params: { user_auth_provider: new_attributes }
                auth_provider.reload
                skip("Add assertions for updated state")
            end

            it "redirects to the user_auth_provider" do
                auth_provider = User::AuthProvider.create! valid_attributes
                patch user_auth_provider_url(user_auth_provider), params: { user_auth_provider: new_attributes }
                auth_provider.reload
                expect(response).to redirect_to(user_auth_provider_url(auth_provider))
            end
        end

        context "with invalid parameters" do
            it "renders a successful response (i.e. to display the 'edit' template)" do
                auth_provider = User::AuthProvider.create! valid_attributes
                patch user_auth_provider_url(user_auth_provider), params: { user_auth_provider: invalid_attributes }
                expect(response).to be_successful
            end
        end
    end

    describe "DELETE /destroy" do
        it "destroys the requested user_auth_provider" do
            auth_provider = User::AuthProvider.create! valid_attributes
            expect {
                delete user_auth_provider_url(user_auth_provider)
            }.to change(User::AuthProvider, :count).by(-1)
        end

        it "redirects to the user_auth_providers list" do
            auth_provider = User::AuthProvider.create! valid_attributes
            delete user_auth_provider_url(user_auth_provider)
            expect(response).to redirect_to(user_auth_providers_url)
        end
    end
end
